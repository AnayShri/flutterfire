// Autogenerated from Pigeon (v10.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins.firebase.firestore;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class GeneratedAndroidFirebaseFirestore {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
          "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonFirebaseSettings {
    private @Nullable Boolean persistenceEnabled;

    public @Nullable Boolean getPersistenceEnabled() {
      return persistenceEnabled;
    }

    public void setPersistenceEnabled(@Nullable Boolean setterArg) {
      this.persistenceEnabled = setterArg;
    }

    private @Nullable String host;

    public @Nullable String getHost() {
      return host;
    }

    public void setHost(@Nullable String setterArg) {
      this.host = setterArg;
    }

    private @Nullable Boolean sslEnabled;

    public @Nullable Boolean getSslEnabled() {
      return sslEnabled;
    }

    public void setSslEnabled(@Nullable Boolean setterArg) {
      this.sslEnabled = setterArg;
    }

    private @Nullable Long cacheSizeBytes;

    public @Nullable Long getCacheSizeBytes() {
      return cacheSizeBytes;
    }

    public void setCacheSizeBytes(@Nullable Long setterArg) {
      this.cacheSizeBytes = setterArg;
    }

    private @NonNull Boolean ignoreUndefinedProperties;

    public @NonNull Boolean getIgnoreUndefinedProperties() {
      return ignoreUndefinedProperties;
    }

    public void setIgnoreUndefinedProperties(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"ignoreUndefinedProperties\" is null.");
      }
      this.ignoreUndefinedProperties = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonFirebaseSettings() {}

    public static final class Builder {

      private @Nullable Boolean persistenceEnabled;

      public @NonNull Builder setPersistenceEnabled(@Nullable Boolean setterArg) {
        this.persistenceEnabled = setterArg;
        return this;
      }

      private @Nullable String host;

      public @NonNull Builder setHost(@Nullable String setterArg) {
        this.host = setterArg;
        return this;
      }

      private @Nullable Boolean sslEnabled;

      public @NonNull Builder setSslEnabled(@Nullable Boolean setterArg) {
        this.sslEnabled = setterArg;
        return this;
      }

      private @Nullable Long cacheSizeBytes;

      public @NonNull Builder setCacheSizeBytes(@Nullable Long setterArg) {
        this.cacheSizeBytes = setterArg;
        return this;
      }

      private @Nullable Boolean ignoreUndefinedProperties;

      public @NonNull Builder setIgnoreUndefinedProperties(@NonNull Boolean setterArg) {
        this.ignoreUndefinedProperties = setterArg;
        return this;
      }

      public @NonNull PigeonFirebaseSettings build() {
        PigeonFirebaseSettings pigeonReturn = new PigeonFirebaseSettings();
        pigeonReturn.setPersistenceEnabled(persistenceEnabled);
        pigeonReturn.setHost(host);
        pigeonReturn.setSslEnabled(sslEnabled);
        pigeonReturn.setCacheSizeBytes(cacheSizeBytes);
        pigeonReturn.setIgnoreUndefinedProperties(ignoreUndefinedProperties);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(persistenceEnabled);
      toListResult.add(host);
      toListResult.add(sslEnabled);
      toListResult.add(cacheSizeBytes);
      toListResult.add(ignoreUndefinedProperties);
      return toListResult;
    }

    static @NonNull PigeonFirebaseSettings fromList(@NonNull ArrayList<Object> list) {
      PigeonFirebaseSettings pigeonResult = new PigeonFirebaseSettings();
      Object persistenceEnabled = list.get(0);
      pigeonResult.setPersistenceEnabled((Boolean) persistenceEnabled);
      Object host = list.get(1);
      pigeonResult.setHost((String) host);
      Object sslEnabled = list.get(2);
      pigeonResult.setSslEnabled((Boolean) sslEnabled);
      Object cacheSizeBytes = list.get(3);
      pigeonResult.setCacheSizeBytes(
          (cacheSizeBytes == null)
              ? null
              : ((cacheSizeBytes instanceof Integer)
                  ? (Integer) cacheSizeBytes
                  : (Long) cacheSizeBytes));
      Object ignoreUndefinedProperties = list.get(4);
      pigeonResult.setIgnoreUndefinedProperties((Boolean) ignoreUndefinedProperties);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonFirebaseApp {
    private @NonNull String appName;

    public @NonNull String getAppName() {
      return appName;
    }

    public void setAppName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"appName\" is null.");
      }
      this.appName = setterArg;
    }

    private @NonNull PigeonFirebaseSettings settings;

    public @NonNull PigeonFirebaseSettings getSettings() {
      return settings;
    }

    public void setSettings(@NonNull PigeonFirebaseSettings setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"settings\" is null.");
      }
      this.settings = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonFirebaseApp() {}

    public static final class Builder {

      private @Nullable String appName;

      public @NonNull Builder setAppName(@NonNull String setterArg) {
        this.appName = setterArg;
        return this;
      }

      private @Nullable PigeonFirebaseSettings settings;

      public @NonNull Builder setSettings(@NonNull PigeonFirebaseSettings setterArg) {
        this.settings = setterArg;
        return this;
      }

      public @NonNull PigeonFirebaseApp build() {
        PigeonFirebaseApp pigeonReturn = new PigeonFirebaseApp();
        pigeonReturn.setAppName(appName);
        pigeonReturn.setSettings(settings);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(appName);
      toListResult.add((settings == null) ? null : settings.toList());
      return toListResult;
    }

    static @NonNull PigeonFirebaseApp fromList(@NonNull ArrayList<Object> list) {
      PigeonFirebaseApp pigeonResult = new PigeonFirebaseApp();
      Object appName = list.get(0);
      pigeonResult.setAppName((String) appName);
      Object settings = list.get(1);
      pigeonResult.setSettings(
          (settings == null)
              ? null
              : PigeonFirebaseSettings.fromList((ArrayList<Object>) settings));
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class FirebaseFirestoreHostApiCodec extends StandardMessageCodec {
    public static final FirebaseFirestoreHostApiCodec INSTANCE =
        new FirebaseFirestoreHostApiCodec();

    private FirebaseFirestoreHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PigeonFirebaseApp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PigeonFirebaseSettings.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PigeonFirebaseApp) {
        stream.write(128);
        writeValue(stream, ((PigeonFirebaseApp) value).toList());
      } else if (value instanceof PigeonFirebaseSettings) {
        stream.write(129);
        writeValue(stream, ((PigeonFirebaseSettings) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface FirebaseFirestoreHostApi {

    void loadBundle(
        @NonNull PigeonFirebaseApp app, @NonNull byte[] bundle, @NonNull Result<String> result);

    /** The codec used by FirebaseFirestoreHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return FirebaseFirestoreHostApiCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `FirebaseFirestoreHostApi` to handle messages through the
     * `binaryMessenger`.
     */
    static void setup(
        @NonNull BinaryMessenger binaryMessenger, @Nullable FirebaseFirestoreHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.FirebaseFirestoreHostApi.loadBundle",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                byte[] bundleArg = (byte[]) args.get(1);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.loadBundle(appArg, bundleArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
